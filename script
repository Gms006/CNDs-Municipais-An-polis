def verificar_saldo_2captcha(api_key):
    """Verifica o saldo da conta 2captcha"""
    try:
        # API endpoint para verificar saldo
        url = f"https://2captcha.com/res.php?key={api_key}&action=getbalance&json=1"
        
        # Fazer requisi√ß√£o para API
        response = requests.get(url)
        data = response.json()
        
        # Verificar se a requisi√ß√£o foi bem-sucedida
        if data.get("status") == 1:
            saldo = float(data.get("request"))
            logger.info(f"[CONFIG] Saldo atual na conta 2Captcha: ${saldo:.2f}")
            return saldo
        else:
            # Se houver erro, registrar o erro
            logger.error(f"Erro ao verificar saldo da 2Captcha: {data.get('request')}")
            return -1
    except Exception as e:
        logger.error(f"Erro ao conectar com a API da 2Captcha: {e}")
        return -1
        
import asyncio
import base64
import json
import os
import time
import re
import logging
import traceback
from datetime import datetime
from dotenv import load_dotenv
from playwright.async_api import async_playwright, expect
import requests
import openpyxl
import colorama
from colorama import Fore, Back, Style

# Inicializar colorama para funcionar em qualquer plataforma
colorama.init()

# Carregar vari√°veis de ambiente
load_dotenv()

# Configura√ß√µes globais
MODO_TESTE = False # Modo teste-> true= captcha manual, false= autom√°tico
MODO_HEADLESS = False # Modo headless-> true= segundo plano, false= vis√≠vel
EXECUTABLE_PATH = "C:/Program Files/Google/Chrome/Application/chrome.exe"
DIRETORIO_BASE = "G:/EMPRESAS/"
PLANILHA_PATH = "G:/PMA/LISTA EMPRESAS - NETO CONTABILIDADE 2025.xlsm"
LOG_PATH = f"G:/PMA/SCRIPTS/CNDs/logs/certidao_fiscal_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
ERROR_LOG_PATH = f"G:/PMA/SCRIPTS/CNDs/logs/erros_certidao_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"

# Configura√ß√£o de logging personalizada
os.makedirs("logs", exist_ok=True)

# Filtro personalizado para mensagens de terminal
class TerminalLogFilter(logging.Filter):
    def filter(self, record):
        # Permitir mensagens de n√≠vel INFO ou maior para terminal
        if record.levelno >= logging.INFO:
            return True
        return False

# Formatador de logs para arquivo (detalhado)
file_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')

# Formatador para terminal (mais conciso e colorido)
class ColoredFormatter(logging.Formatter):
    def format(self, record):
        # Formato base sem timestamp para o terminal
        self._style._fmt = '%(message)s'
        
        # Adicionar cores baseadas no n√≠vel de log
        if record.levelno >= logging.ERROR:
            prefix = f"{Fore.RED}[‚úò] ERRO: "
            suffix = Style.RESET_ALL
        elif record.levelno >= logging.WARNING:
            prefix = f"{Fore.YELLOW}[‚ö†] AVISO: "
            suffix = Style.RESET_ALL
        elif record.levelno >= logging.INFO:
            # Adicionar formata√ß√£o espec√≠fica baseada em marcadores no log
            if "[PROGRESSO]" in record.msg:
                prefix = f"{Fore.CYAN}"
                suffix = Style.RESET_ALL
                record.msg = record.msg.replace("[PROGRESSO]", "")
            elif "[SUCESSO]" in record.msg:
                prefix = f"{Fore.GREEN}[‚úì] "
                suffix = Style.RESET_ALL
                record.msg = record.msg.replace("[SUCESSO]", "")
            elif "[CONFIG]" in record.msg:
                prefix = f"{Fore.BLUE}[‚öô] "
                suffix = Style.RESET_ALL
                record.msg = record.msg.replace("[CONFIG]", "")
            elif "[DOWNLOAD]" in record.msg:
                prefix = f"{Fore.GREEN}[üìÑ] "
                suffix = Style.RESET_ALL
                record.msg = record.msg.replace("[DOWNLOAD]", "")
            elif "[INICIO]" in record.msg or "[FIM]" in record.msg:
                prefix = f"{Fore.CYAN}{'=' * 50}\n"
                suffix = f"\n{'=' * 50}{Style.RESET_ALL}"
                record.msg = record.msg.replace("[INICIO]", "").replace("[FIM]", "")
            else:
                prefix = ""
                suffix = Style.RESET_ALL
        else:
            prefix = ""
            suffix = ""
        
        # Formatar com prefixo e sufixo coloridos
        formatted_message = super().format(record)
        return f"{prefix}{formatted_message}{suffix}"

# Configurar handlers
# 1. Handler para arquivo de log principal
file_handler = logging.FileHandler(LOG_PATH, encoding='utf-8')
file_handler.setLevel(logging.INFO)
file_handler.setFormatter(file_formatter)

# 2. Handler para arquivo de erros
error_handler = logging.FileHandler(ERROR_LOG_PATH, encoding='utf-8')
error_handler.setLevel(logging.ERROR)
error_handler.setFormatter(file_formatter)

# 3. Handler para console com formata√ß√£o colorida
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_handler.setFormatter(ColoredFormatter())
console_handler.addFilter(TerminalLogFilter())

# Configurar o logger principal
logger = logging.getLogger()
logger.setLevel(logging.INFO)
logger.addHandler(file_handler)
logger.addHandler(error_handler)
logger.addHandler(console_handler)

def carregar_variaveis_ambiente():
    """Carrega vari√°veis de ambiente do arquivo .env"""
    api_key = os.getenv("API_KEY_2CAPTCHA")
    if not api_key:
        logger.error("Verifique se API_KEY_2CAPTCHA est√° corretamente definido no .env")
        raise ValueError("ERRO: Verifique se API_KEY_2CAPTCHA est√° corretamente definido no .env")
    return api_key

def resolver_captcha_2captcha(image_base64, api_key):
    """Resolve captcha usando o servi√ßo 2CAPTCHA"""
    logger.info("[CONFIG] Enviando captcha para resolu√ß√£o com 2CAPTCHA")
    url = "http://2captcha.com/in.php"
    data = {'method': 'base64', 'key': api_key, 'body': image_base64, 'json': 1}
    response = requests.post(url, data=data).json()
    if response.get("status") != 1:
        logger.error(f"Erro ao enviar captcha: {response}")
        raise Exception("Erro ao enviar captcha")
    
    captcha_id = response["request"]
    logger.info(f"[CONFIG] Captcha enviado com ID: {captcha_id}. Aguardando resolu√ß√£o...")
    
    for attempt in range(1, 21):
        time.sleep(5)
        res = requests.get(f"http://2captcha.com/res.php?key={api_key}&action=get&id={captcha_id}&json=1").json()
        if res.get("status") == 1:
            logger.info(f"[SUCESSO] Captcha resolvido")
            return res["request"]
        # Log detalhado apenas para arquivo, n√£o para terminal
        logging.getLogger().debug(f"Tentativa {attempt}/20: {res}")
    
    logger.error("Timeout na resolu√ß√£o do captcha")
    raise Exception("Timeout na resolu√ß√£o do captcha")

def carregar_cnpjs_da_planilha():
    """Carrega lista de CNPJs da aba 'CNPJs' da planilha"""
    try:
        logger.info("[CONFIG] Carregando CNPJs da planilha...")
        wb = openpyxl.load_workbook(PLANILHA_PATH, read_only=True, data_only=True)
        sheet = wb["CNPJs"]
        
        cnpjs = []
        empresas = {}
        
        for row in sheet.iter_rows(min_row=2):
            if row[0].value and row[1].value:  # Nome da empresa (coluna A) e CNPJ (coluna B)
                nome_empresa = str(row[0].value).strip()
                cnpj = str(row[1].value).strip()
                
                # Normalizar CNPJ se necess√°rio
                if not re.match(r'\d{2}\.\d{3}\.\d{3}/\d{4}-\d{2}', cnpj):
                    # Tenta formatar CNPJ num√©rico para o formato XX.XXX.XXX/XXXX-XX
                    cnpj_limpo = re.sub(r'[^\d]', '', cnpj)
                    if len(cnpj_limpo) == 14:
                        cnpj = f"{cnpj_limpo[:2]}.{cnpj_limpo[2:5]}.{cnpj_limpo[5:8]}/{cnpj_limpo[8:12]}-{cnpj_limpo[12:]}"
                
                cnpjs.append(cnpj)
                empresas[cnpj] = nome_empresa
        
        wb.close()
        logger.info(f"[SUCESSO] {len(cnpjs)} CNPJs carregados da planilha")
        return cnpjs, empresas
    except Exception as e:
        logger.error(f"Erro ao carregar CNPJs da planilha: {e}")
        with open(ERROR_LOG_PATH, 'a', encoding='utf-8') as f:
            f.write(f"\n\nErro ao carregar CNPJs da planilha:\n{traceback.format_exc()}")
        raise

def obter_nome_empresa_por_cnpj(cnpj, empresas_dict):
    """Retorna o nome da empresa com base no CNPJ, considerando formata√ß√£o."""
    cnpj_limpo = re.sub(r'[^\d]', '', cnpj)

    for cnpj_dict, nome in empresas_dict.items():
        cnpj_dict_limpo = re.sub(r'[^\d]', '', cnpj_dict)
        if cnpj_dict_limpo == cnpj_limpo:
            return nome

    return f"EMPRESA_{cnpj_limpo}"  # Nome gen√©rico se n√£o encontrar

def criar_diretorio_empresa(cnpj, empresas_dict):
    """Cria o diret√≥rio para salvar a certid√£o da empresa"""
    nome_empresa = obter_nome_empresa_por_cnpj(cnpj, empresas_dict)
    
    # Criar o caminho base para as empresas
    if MODO_TESTE:
        # Em modo teste, apenas criar pasta local
        base_dir = "certidoes"
        diretorio = os.path.join(base_dir, nome_empresa, "PMA")
    else:
        # Em produ√ß√£o, procurar pasta da empresa existente dentro de DIRETORIO_BASE
        try:
            # Tentar encontrar a pasta da empresa baseada em uma busca aproximada
            if os.path.exists(DIRETORIO_BASE):
                empresas_existentes = [d for d in os.listdir(DIRETORIO_BASE) 
                                    if os.path.isdir(os.path.join(DIRETORIO_BASE, d))]
                
                # Normalize o nome da empresa para compara√ß√£o (remover espa√ßos extras, mai√∫sculas/min√∫sculas)
                nome_empresa_norm = re.sub(r'\s+', ' ', nome_empresa.lower().strip())
                
                # Procurar por correspond√™ncia aproximada
                empresa_encontrada = None
                def limpar_e_dividir(nome):
                    return re.sub(r'[^\w\s]', '', nome).lower().split()

                palavras_alvo = limpar_e_dividir(nome_empresa)[:4]

                for empresa in empresas_existentes:
                    palavras_pasta = limpar_e_dividir(empresa)
                    if palavras_pasta[:len(palavras_alvo)] == palavras_alvo:
                        empresa_encontrada = empresa
                        break
                
                # Se n√£o encontrar correspond√™ncia aproximada, usar o nome original
                if empresa_encontrada:
                    logger.info(f"[CONFIG] Pasta encontrada para empresa: {empresa_encontrada}")
                    diretorio = os.path.join(DIRETORIO_BASE, empresa_encontrada, "PMA")
                else:
                    logger.warning(f"[CONFIG] Pasta para empresa '{nome_empresa}' n√£o encontrada, usando nome da planilha")
                    diretorio = os.path.join(DIRETORIO_BASE, nome_empresa, "PMA")
            else:
                logger.warning(f"[CONFIG] Diret√≥rio base {DIRETORIO_BASE} n√£o encontrado")
                diretorio = os.path.join(DIRETORIO_BASE, nome_empresa, "PMA")
        except Exception as e:
            logger.warning(f"Erro ao buscar pasta da empresa: {e}")
            # Em caso de erro, usar o nome original
            diretorio = os.path.join(DIRETORIO_BASE, nome_empresa, "PMA")
    
    # Criar diret√≥rio se n√£o existir
    os.makedirs(diretorio, exist_ok=True)
    
    logger.info(f"[CONFIG] Diret√≥rio para salvar certid√£o: {diretorio}")
    return diretorio

async def acessar_pagina_certidao(page):
    """Acessa diretamente a p√°gina de certid√£o sem fazer login"""
    logger.info("[CONFIG] Acessando p√°gina de certid√£o...")
    
    # Usar apenas a URL base, sempre
    await page.goto("https://portaldocidadao.anapolis.go.gov.br/")
    
    # Aguardar carregamento inicial
    await page.wait_for_load_state("networkidle")
    
    # Navegar para o menu de certid√µes
    try:
        # Hover sobre o menu "Certid√µes"
        await page.hover("a.pure-menu-link:text('Certid√µes')")
        
        # Aguardar o submenu ficar vis√≠vel
        await page.wait_for_selector("a.pure-menu-link[data-navigation='7021']", timeout=10000)
        
        # Clicar no submenu "Certid√£o de Regularidade Fiscal do Contribuinte"
        await page.click("a.pure-menu-link[data-navigation='7021']")
        
        # Aguardar carregamento da p√°gina
        await page.wait_for_load_state("networkidle")
        
        logger.info("[SUCESSO] P√°gina de emiss√£o de certid√£o acessada")
    except Exception as e:
        logger.error(f"Erro ao acessar menu de certid√µes: {e}")
        # Se n√£o conseguir navegar pelo menu, o script ser√° interrompido
        raise Exception("N√£o foi poss√≠vel acessar a p√°gina de emiss√£o de certid√£o")

async def emitir_certidao(page, cnpj, api_key, idx, total, empresas_dict):
    """Emite e baixa a certid√£o para um CNPJ espec√≠fico"""
    try:
        # Mostrar progresso
        porcentagem = (idx / total) * 100
        barra = f"[{Fore.GREEN}{'‚ñà' * int(porcentagem/5)}{Fore.WHITE}{'‚ñë' * (20 - int(porcentagem/5))}{Style.RESET_ALL}] {porcentagem:.1f}% ({idx}/{total})"
        logger.info(f"[PROGRESSO] {barra}")
        logger.info(f"Emitindo certid√£o para CNPJ {cnpj}")
        
        # Clicar no dropdown e selecionar CNPJ
        try:
            # Estrat√©gia 2: Clicar diretamente no dropdown vis√≠vel
            await page.locator('span.select2-chosen, .select2-selection__rendered, [class*="select2"]:visible').first.click()
            await page.wait_for_timeout(1000)  # Aguardar a rea√ß√£o do dropdown
            
            # Tentar clicar na op√ß√£o CNPJ
            cnpj_options = [
                'li:has-text("CNPJ")',
                '.select2-results__option:has-text("CNPJ")', 
                'div.select2-result-label:has-text("CNPJ")', 
                'div:has-text("CNPJ")'
            ]
            
            for option in cnpj_options:
                try:
                    if await page.locator(option).count() > 0:
                        await page.locator(option).first.click()
                        logger.info("[CONFIG] Op√ß√£o CNPJ selecionada com sucesso.")
                        break
                except Exception as e:
                    logger.debug(f"Erro ao selecionar op√ß√£o CNPJ {option}: {str(e)}")
            
        except Exception as e:
            logger.warning(f"Erro ao selecionar CNPJ no dropdown: {e}")
        
        # Aguardar para garantir que a interface foi atualizada
        await page.wait_for_timeout(2000)
        
        # Localizar e preencher o campo CNPJ via JavaScript
        await page.evaluate(f"""
            (cnpj) => {{
                // Tentar encontrar o campo correto para CNPJ
                const inputs = Array.from(document.querySelectorAll('input[type="text"]'));
                let cnpjInput = null;
                
                // Procurar por input que pare√ßa ser para CNPJ
                for (const input of inputs) {{
                    // Verificar por atributos ou elementos pr√≥ximos
                    if (input.placeholder && (input.placeholder.includes('CNPJ') || input.placeholder.includes('Informe'))) {{
                        cnpjInput = input;
                        break;
                    }}
                    
                    // Verificar maxlength (CNPJ geralmente tem 18 caracteres com formata√ß√£o)
                    if (input.maxLength >= 14 && input.maxLength <= 18) {{
                        cnpjInput = input;
                    }}
                }}
                
                // Se encontramos um input, preench√™-lo
                if (cnpjInput) {{
                    cnpjInput.focus();
                    cnpjInput.value = cnpj;
                    
                    // Disparar eventos para garantir que o sistema reconhe√ßa a altera√ß√£o
                    cnpjInput.dispatchEvent(new Event('input', {{ bubbles: true }}));
                    cnpjInput.dispatchEvent(new Event('change', {{ bubbles: true }}));
                    
                    return true;
                }}
                
                return false;
            }}
        """, cnpj)
        
        logger.info(f"[CONFIG] CNPJ {cnpj} preenchido no formul√°rio")
        
        # Resolver CAPTCHA para este CNPJ
        if MODO_TESTE:
            logger.info(f"{Fore.YELLOW}[CONFIG] MODO TESTE: Resolva o CAPTCHA manualmente no navegador.{Style.RESET_ALL}")
            input(f"{Fore.YELLOW}‚úÖ Quando terminar, clique em 'Consultar' no site e depois aperte ENTER aqui para continuar...{Style.RESET_ALL}")
        else:
            # Localizar a imagem do captcha
            captcha_selectors = [
                "img.step-img", 
                "img[src*='captcha.action']",
                "img[alt*='captcha']",
                "img[src*='captcha']"
            ]
            
            captcha_element = None
            for selector in captcha_selectors:
                if await page.locator(selector).count() > 0:
                    captcha_element = page.locator(selector).first
                    break
            
            if not captcha_element:
                raise Exception("N√£o foi poss√≠vel encontrar a imagem do CAPTCHA")
                
            captcha_bytes = await captcha_element.screenshot()
            captcha_img = base64.b64encode(captcha_bytes).decode("utf-8")
            resposta = resolver_captcha_2captcha(captcha_img, api_key)
            logger.info(f"[CONFIG] Preenchendo captcha com resposta: {resposta}")
            
            # Encontrar dinamicamente o campo de CAPTCHA pr√≥ximo √† imagem
            captcha_field = None
            captcha_input_selectors = [
                'img[src*="captcha"] + input[type="text"][value=""]',
                'img[src*="captcha"] ~ input[type="text"][value=""]',
                'input[type="text"][value=""]:below(img[src*="captcha"])',
                'input[type="text"][value=""]:right-of(img[src*="captcha"])'
            ]

            for selector in captcha_input_selectors:
                try:
                    locator = page.locator(selector)
                    if await locator.count() > 0:
                        captcha_field = locator.first
                        await captcha_field.fill(resposta)
                        if await captcha_field.input_value():
                            break
                except Exception as e_inner:
                    logger.debug(f"Erro ao localizar campo do captcha com {selector}: {str(e_inner)}")

            if not captcha_field or not await captcha_field.input_value():
                # Fallback: procurar via JavaScript um campo de texto vazio pr√≥ximo √† imagem do CAPTCHA
                captcha_input_found = await page.evaluate(f"""
                    (resposta) => {{
                        const img = document.querySelector('img[src*="captcha"]');
                        if (!img) return false;

                        const candidates = Array.from(document.querySelectorAll('input[type="text"]')).filter(i => !i.value);
                        const imgRect = img.getBoundingClientRect();

                        for (const input of candidates) {{
                            const rect = input.getBoundingClientRect();
                            const nearVertically = rect.top >= imgRect.top - 50 && rect.top <= imgRect.bottom + 50;
                            const nearHorizontally = Math.abs(rect.left - imgRect.left) < 300;
                            if (nearVertically && nearHorizontally) {{
                                input.focus();
                                input.value = resposta;
                                input.dispatchEvent(new Event('input', {{ bubbles: true }}));
                                input.dispatchEvent(new Event('change', {{ bubbles: true }}));
                                return true;
                            }}
                        }}

                        if (candidates.length > 0) {{
                            const input = candidates[0];
                            input.focus();
                            input.value = resposta;
                            input.dispatchEvent(new Event('input', {{ bubbles: true }}));
                            input.dispatchEvent(new Event('change', {{ bubbles: true }}));
                            return true;
                        }}
                        return false;
                    }}
                """, resposta)

                if captcha_input_found:
                    # Captcha foi preenchido via script
                    captcha_field = None
                else:
                    logger.warning("Campo do CAPTCHA n√£o encontrado")
            
            # Verificar se o captcha foi realmente preenchido antes de clicar no bot√£o
            if captcha_field:
                captcha_preenchido = bool(await captcha_field.input_value())
            else:
                captcha_preenchido = await page.evaluate("""
                    () => {
                        const img = document.querySelector('img[src*="captcha"]');
                        if (!img) return false;

                        const inputs = Array.from(document.querySelectorAll('input[type="text"]'));
                        const imgRect = img.getBoundingClientRect();

                        return inputs.some(input => {
                            if (!input.value) return false;
                            const rect = input.getBoundingClientRect();
                            const nearVertically = rect.top >= imgRect.top - 50 && rect.top <= imgRect.bottom + 50;
                            const nearHorizontally = Math.abs(rect.left - imgRect.left) < 300;
                            return nearVertically && nearHorizontally;
                        });
                    }
                """)
            
            if not captcha_preenchido:
                logger.warning("[CONFIG] CAPTCHA possivelmente n√£o preenchido! Tentando novamente...")
                if captcha_field:
                    await captcha_field.fill(resposta)
                    await page.wait_for_timeout(2000)
            
            # Agora sim, localizar e clicar no bot√£o consultar via JavaScript
            await page.evaluate("""
                () => {
                    const buttons = Array.from(document.querySelectorAll('input[type="button"], button'));
                    for (const btn of buttons) {
                        if (btn.value && btn.value.includes('Consultar') || 
                            btn.textContent && btn.textContent.includes('Consultar')) {
                            btn.click();
                            return true;
                        }
                    }
                    return false;
                }
            """)
        
        # Aguardar carregamento do resultado
        logger.info("[CONFIG] Aguardando carregamento da certid√£o...")
        await page.wait_for_load_state("networkidle", timeout=30000)

        # Verificar se um popup de erro de c√≥digo de verifica√ß√£o apareceu
        try:
            popup = page.locator("div.swal2-popup:has-text('O c√≥digo de verifica√ß√£o n√£o confere')")
            if await popup.count() > 0:
                logger.warning("C√≥digo de verifica√ß√£o incorreto detectado")
                await page.click('.swal2-confirm')
                return False
        except Exception as e_popup:
            logger.debug(f"Falha ao verificar popup de c√≥digo incorreto: {e_popup}")

        # Esperar um tempo adicional para garantir que a p√°gina carregou completamente
        await page.wait_for_timeout(5000)
        
        # Criar diret√≥rio para salvar a certid√£o
        diretorio_destino = criar_diretorio_empresa(cnpj, empresas_dict)
        
        # N√£o vamos tentar encontrar o elemento, vamos direto para o download
        logger.info("[CONFIG] Tentando baixar certid√£o...")
        
        # Detectar e clicar no √≠cone de download com JavaScript
        download_click_success = await page.evaluate("""
            () => {
                // Procurar todos os elementos que possam ser bot√µes de download
                const downloadElements = [
                    ...document.querySelectorAll('img[src*="download"]'),
                    ...document.querySelectorAll('a[href*="download"]'),
                    ...document.querySelectorAll('button[title*="Download"]'),
                    ...document.querySelectorAll('i[class*="download"]')
                ];
                
                if (downloadElements.length > 0) {
                    downloadElements[0].click();
                    return true;
                }
                
                // Procurar qualquer elemento que tenha 'download' em seu conte√∫do
                const elements = document.evaluate(
                    "//*[contains(@src, 'download') or contains(@href, 'download') or contains(@class, 'download') or contains(@title, 'download')]",
                    document,
                    null,
                    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,
                    null
                );
                
                if (elements.snapshotLength > 0) {
                    elements.snapshotItem(0).click();
                    return true;
                }
                
                return false;
            }
        """)
            
        if download_click_success:
            # Se clicou com sucesso, aguardar o download
            try:
                async with page.expect_download(timeout=30000) as download_info:
                    download = await download_info.value
                    
                    # Gerar nome do arquivo com data no formato dd.mm.aaaa
                    data_atual = datetime.now().strftime("%d.%m.%Y")
                    nome_arquivo = f"CND - {data_atual}.pdf"
                    
                    # Caminho completo para salvar o arquivo
                    caminho_arquivo = os.path.join(diretorio_destino, nome_arquivo)
                    
                    # Salvar o arquivo baixado
                    await download.save_as(caminho_arquivo)
                    
                    logger.info(f"[DOWNLOAD] Certid√£o salva em: {caminho_arquivo}")
                    return True
            except Exception as e:
                logger.error(f"Erro ao aguardar download ap√≥s clique via JavaScript: {str(e)}")
        else:
            logger.error("N√£o foi poss√≠vel localizar ou acionar o bot√£o de download da certid√£o")
            
        return False
        
    except Exception as e:
        logger.error("Erro ao emitir certid√£o para CNPJ %s: %s", cnpj, str(e))
        with open(ERROR_LOG_PATH, 'a', encoding='utf-8') as f:
            f.write(f"\n\nErro ao emitir certid√£o para CNPJ {cnpj}:\n{traceback.format_exc()}")
        return False

async def processar_cnpjs(page, cnpjs, api_key, empresas_dict):
    """Processa a lista de CNPJs, emitindo certid√µes para cada um deles"""
    total = len(cnpjs)
    sucessos = 0
    falhas = 0
    
    logger.info(f"Iniciando processamento de {total} CNPJs")
    
    # Verificar e criar diret√≥rio base para certid√µes em modo teste
    if MODO_TESTE:
        os.makedirs("certidoes", exist_ok=True)
    
    # Acessar a p√°gina de certid√£o uma √∫nica vez no in√≠cio
    await acessar_pagina_certidao(page)
    
    for idx, cnpj in enumerate(cnpjs, start=1):
        try:
            # Tentar emitir a certid√£o para o CNPJ atual
            if await emitir_certidao(page, cnpj, api_key, idx, total, empresas_dict):
                logger.info(f"[SUCESSO] Certid√£o emitida para CNPJ {cnpj}")
                sucessos += 1
            else:
                logger.warning(f"Falha ao emitir certid√£o para CNPJ {cnpj}")
                falhas += 1
                
            # Voltar √† p√°gina de certid√£o para o pr√≥ximo CNPJ
            if idx < total:
                await acessar_pagina_certidao(page)
                
        except Exception as e:
            erro_msg = str(e).split('\n')[0]
            logger.error(f"CNPJ {cnpj} ‚Äì Falha: {erro_msg}")
            falhas += 1
            
            # Tentar acessar a p√°gina novamente para o pr√≥ximo CNPJ
            if idx < total:
                try:
                    await acessar_pagina_certidao(page)
                except Exception as nav_err:
                    logger.error(f"Falha ao retornar √† p√°gina de certid√£o: {nav_err}")
                    with open(ERROR_LOG_PATH, 'a', encoding='utf-8') as f:
                        f.write(f"\n\nFalha ao voltar √† p√°gina de certid√£o:\n{traceback.format_exc()}")
    
    # Resumo final com estat√≠sticas
    taxa_sucesso = (sucessos / total) * 100 if total > 0 else 0
    logger.info(f"""
{Fore.CYAN}{'=' * 70}{Style.RESET_ALL}
{Fore.GREEN}‚úÖ PROCESSAMENTO FINALIZADO{Style.RESET_ALL}

{Fore.CYAN}üìä RESUMO ESTAT√çSTICO:{Style.RESET_ALL}
  ‚Ä¢ Total de CNPJs processados: {total}
  ‚Ä¢ Certid√µes emitidas com sucesso: {sucessos} ({taxa_sucesso:.1f}%)
  ‚Ä¢ Falhas: {falhas}
{Fore.CYAN}{'=' * 70}{Style.RESET_ALL}
""")
    
    return sucessos, falhas

async def main():
    # Carregar vari√°veis e dados necess√°rios
    logger.info("[INICIO] EMISS√ÉO DE CERTID√ïES DE REGULARIDADE FISCAL")
    
    try:
        API_KEY = carregar_variaveis_ambiente()
        
        # Carregar CNPJs da planilha
        cnpjs, empresas_dict = carregar_cnpjs_da_planilha()
        
        # Verifica√ß√£o de saldo 2Captcha
        if not MODO_TESTE:
            saldo_disponivel = verificar_saldo_2captcha(API_KEY)
            if saldo_disponivel == -1:
                raise Exception("N√£o foi poss√≠vel verificar o saldo da 2Captcha.")
    
        if saldo_disponivel < 0.01:  # Definindo um m√≠nimo simb√≥lico s√≥ pra n√£o estar zerado
            raise Exception(f"Saldo muito baixo na 2Captcha: apenas ${saldo_disponivel:.2f}")
    
        logger.info(f"[CONFIG] Saldo suficiente: ${saldo_disponivel:.2f} dispon√≠vel para {len(cnpjs)} CNPJs")
        
        logger.info("[CONFIG] Configura√ß√µes carregadas")
        logger.debug(f"API_KEY: {API_KEY[:4] + '...' if API_KEY else None}")
        logger.info(f"{Fore.CYAN}‚Ä¢ CNPJs a processar: {len(cnpjs)}{Style.RESET_ALL}")
        logger.info(f"{Fore.BLUE}‚Ä¢ Modo teste: {'ATIVADO' if MODO_TESTE else 'DESATIVADO'}{Style.RESET_ALL}")
        
        async with async_playwright() as p:
            browser = await p.chromium.launch(headless=MODO_HEADLESS, executable_path=EXECUTABLE_PATH)
            context = await browser.new_context(ignore_https_errors=True)
            page = await context.new_page()
            
            logger.info("[PROGRESSO] Iniciando emiss√£o de certid√µes")
            await processar_cnpjs(page, cnpjs, API_KEY, empresas_dict)
            
            logger.info("Finalizando navega√ß√£o...")
            await context.close()
            await browser.close()
        
        logger.info("[FIM] SCRIPT FINALIZADO COM SUCESSO")
        
    except Exception as e:
        erro_msg = str(e).split('\n')[0]
        logger.error(f"Erro cr√≠tico durante a execu√ß√£o: {erro_msg}")
        with open(ERROR_LOG_PATH, 'a', encoding='utf-8') as f:
            f.write(f"\n\nErro cr√≠tico durante a execu√ß√£o:\n{traceback.format_exc()}")
        logger.error("[FIM] SCRIPT FINALIZADO COM ERROS")

if __name__ == "__main__":
    try:
        # Imprimir cabe√ßalho colorido
        print(f"""
{Fore.CYAN}{'=' * 70}
{Fore.CYAN}‚ñà‚ñÄ‚ñÄ ‚ñà‚ñÄ‚ñÄ ‚ñà‚ñÄ‚ñà ‚ñÄ‚ñà‚ñÄ ‚ñà ‚ñà‚ñÄ‚ñÑ ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñà   ‚ñà‚ñÄ‚ñÄ ‚ñà ‚ñà‚ñÄ ‚ñà‚ñÄ‚ñÄ ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñë‚ñë
{Fore.CYAN}‚ñà‚ñÑ‚ñÑ ‚ñà‚ñà‚ñÑ ‚ñà‚ñÄ‚ñÑ ‚ñë‚ñà‚ñë ‚ñà ‚ñà‚ñÑ‚ñÄ ‚ñà‚ñÄ‚ñà ‚ñà‚ñÑ‚ñà   ‚ñà‚ñÄ‚ñë ‚ñà ‚ñÑ‚ñà ‚ñà‚ñÑ‚ñÑ ‚ñà‚ñÄ‚ñà ‚ñà‚ñÑ‚ñÑ
{Fore.CYAN}{'=' * 70}{Style.RESET_ALL}
""")
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.warning(f"{Fore.YELLOW}[!] Programa interrompido pelo usu√°rio{Style.RESET_ALL}")
        logger.info("[FIM] SCRIPT FINALIZADO MANUALMENTE")
